{"version":3,"file":"static/js/624.d8fe1c43.chunk.js","mappings":"gRACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA4E,oBAA5E,EAAuG,mBAAvG,EAAsI,wBAAtI,EAA4K,0B,SC6D5K,EAtDa,WAET,OAAwBA,EAAAA,EAAAA,UAAS,CAC7BC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAaC,EAAb,KAKQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,6FACfJ,GAAQ,SAAAK,GAAS,yBAAUA,GAAV,IAAqBR,SAAS,OADhC,UAEQS,EAAAA,EAAAA,IAAYL,GAFpB,gBAEPF,EAFO,EAEPA,KACR,IACIC,GAAQ,SAAAK,GAAS,yBAAUA,GAAV,IAAqBT,MAAOG,EAAMF,SAAS,OAC9D,MAAOC,GACLE,GAAQ,SAAAK,GAAS,yBAAUA,GAAV,IAAqBR,SAAS,EAAOC,MAAOA,EAAMS,aANxD,2CAAH,qDAShBH,MACD,CAACH,IAEJ,IAAQL,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAClBU,EAASC,QAAQC,OAAOC,OAAOf,GAAOgB,QAEtCC,EAAWjB,EAAMkB,KAAI,YAA4C,IAAzCb,EAAwC,EAAxCA,GAAIc,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAClD,OACI,gBAAaC,UAAWC,EAAxB,WACI,0BACI,gBAAKC,KAAKC,EAAAA,EAAAA,GAAcL,GAAeM,IAAKP,OAEhD,iBAAKG,UAAWC,EAAhB,WACI,cAAGD,UAAWC,EAAd,SAA4BJ,KAC5B,cAAGG,UAAWC,EAAd,SAAiCF,SANhChB,MAYjB,OACI,2BACKO,EAAS,GACF,eAAIU,UAAWC,EAAf,SACKN,KAGL,cAAGK,UAAWC,EAAd,mDAEPtB,IAAW,sCACXC,IAAS,uBAAIA,S,iMCvDpByB,E,MAAWC,GAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAiB,mCAAG,sGACNL,EAASM,IAAI,uBADP,uBACrBC,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qDAKjBC,EAAa,mCAAG,WAAO9B,GAAP,yFACFsB,EAASM,IAAT,iBAAuB5B,IADrB,uBACjB6B,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKbE,EAAiB,mCAAG,WAAOC,GAAP,yFACNV,EAASM,IAAI,gBAAiB,CACjDH,OAAQ,CACJO,MAAAA,KAHqB,uBACrBH,EADqB,EACrBA,KADqB,kBAMtBA,EAAKI,SANiB,2CAAH,sDASjB5B,EAAW,mCAAG,WAAOL,GAAP,yFACAsB,EAASM,IAAT,iBAAuB5B,EAAvB,aADA,uBACf6B,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXK,EAAa,mCAAG,WAAOlC,GAAP,yFACFsB,EAASM,IAAT,iBAAuB5B,EAAvB,aADE,uBACjB6B,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,uD,mBC5B1B,IAFsB,SAACM,GAAD,OAAWA,EAAI,UAHhB,mCAGgB,OAAqBA,GAArB,UAFb","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/cast.module.scss?8bbe","components/Cast/Cast.jsx","shared/services/movies.js","shared/services/posterLink.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cast_list__x5fro\",\"item\":\"cast_item__O4gT+\",\"actor\":\"cast_actor__Sgy9T\",\"name\":\"cast_name__iQrFU\",\"character\":\"cast_character__iRSK0\",\"alternative\":\"cast_alternative__yr4W3\"};","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { getCastById } from \"shared/services/movies\";\nimport getPosterLink from \"shared/services/posterLink\";\n\nimport styles from './cast.module.scss';\n\nconst Cast = () => {\n\n    const [cast, setCast] = useState({\n        items: [],\n        loading: false,\n        error: null,\n    });\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchCasts = async () => {\n            setCast(prevState => ({ ...prevState, loading: true }));\n            const { cast } = await getCastById(id);\n            try {              \n                setCast(prevState => ({ ...prevState, items: cast, loading: false }));\n            } catch (error) {\n                setCast(prevState => ({ ...prevState, loading: false, error: error.message }));\n            }\n        }\n        fetchCasts();\n    }, [id]);\n\n    const { items, loading, error } = cast;\n    const isCast = Boolean(Object.values(items).length);\n\n    const elements = items.map(({ id, name, profile_path, character }) => {\n        return (\n            <li key={id} className={styles.item}>\n                <div>\n                    <img src={getPosterLink(profile_path)} alt={name} />\n                </div>\n                <div className={styles.actor}>\n                    <p className={styles.name}>{name}</p>\n                    <p className={styles.character}>{character}</p>\n                </div>\n            </li>\n        )\n    });\n\n    return (\n        <div>\n            {isCast > 0 ? (\n                    <ul className={styles.list}>\n                        {elements}\n                    </ul>\n                ) : (\n                    <p className={styles.alternative}>We don't have any cast for this movie</p>\n            )}\n            {loading && <p>...Loading</p>}\n            {error && <p>{error}</p>}\n        </div>\n    )\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: \"46bbf66c9e65ae01644c2e2f5cf2826f\"\n    }\n});\n\nexport const getTrendingMovies = async () => {\n    const { data } = await instance.get('/trending/movie/day');\n    return data;\n};\n\nexport const getMoviesByID = async (id) => {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n};\n\nexport const getMoviesBySearch = async (query) => {\n    const { data } = await instance.get('/search/movie', {\n        params: {\n            query\n        }\n    });\n    return data.results;\n};\n\nexport const getCastById = async (id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n};\n\nexport const getReviewById = async (id) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n};","const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst DEFAULT_IMG_URL = 'https://icon-library.com/images/not-found-icon/not-found-icon-25.jpg';\n\nconst getPosterLink = (path) => (path ? `${BASE_IMG_URL}${path}` : `${DEFAULT_IMG_URL}`);\n\nexport default getPosterLink;"],"names":["useState","items","loading","error","cast","setCast","id","useParams","useEffect","fetchCasts","prevState","getCastById","message","isCast","Boolean","Object","values","length","elements","map","name","profile_path","character","className","styles","src","getPosterLink","alt","instance","axios","baseURL","params","api_key","getTrendingMovies","get","data","getMoviesByID","getMoviesBySearch","query","results","getReviewById","path"],"sourceRoot":""}